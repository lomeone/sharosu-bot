const scriptName = "sharosu-bot";

const alreadyGameStartError = (gameType) => {
  const error = new Error(
    `${gameType} Í≤åÏûÑÏù¥ ÏßÑÌñâÏ§ëÏù¥ÏóêÏöî\nÎ≥ÑÎèÑÏùò ÏòàÏïΩÏóÜÏù¥ Îß§Ïû•Ïóê Î∞îÎ°ú Î∞©Î¨∏ÌïòÏãúÎ©¥ Í≤åÏûÑÏùÑ Ï¶êÍ∏∞Ïã§ Ïàò ÏûàÏñ¥Ïöî`
  );
  return error;
};

const notExistReserveNickname = () => {
  const error = new Error(
    "ÎãâÎÑ§ÏûÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÖîÏïº ÏòàÏïΩÏù¥ Í∞ÄÎä•Ìï¥Ïöî~!\nÏòàÏãú: !Î™¨Ïä§ÌÑ∞ ÏòàÏïΩ Ïª¥ÌÖå 20:00"
  );
  return error;
};

const notExistCancelNickname = () => {
  const error = new Error(
    "ÏòàÏïΩÏ∑®ÏÜåÌï† ÎãâÎÑ§ÏûÑÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî\nÏòàÏãú: !Î™¨Ïä§ÌÑ∞ ÏòàÏïΩÏ∑®ÏÜå Ïª¥ÌÖå"
  );
  return error;
};

const alreadyGameStartErrorForStaff = () => {
  const error = new Error(
    "Îã®ÌÜ°Î∞©ÏßëÏ§ë~!\nÏòàÏïΩÏùÑ Î∞õÏïÑÏïºÏßÄ ÏòàÏïΩÎßàÍ∞êÏùÑ Ìï† Ïàò ÏûàÏñ¥Ïöî~!"
  );
  return error;
};

const reservationInprogressError = () => {
  const error = new Error("Îã®ÌÜ°Î∞©Ïóê ÏßëÏ§ëÌïòÏÑ∏Ïöî~!\nÍ≤åÏûÑ ÏòàÏïΩÏßÑÌñâÏ§ëÏù¥ÏóêÏöî~!");
  return error;
};

const notStaffError = () => {
  const error = new Error("Ïä§ÌÖùÎßå ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎäî Î™ÖÎ†πÏñ¥ÏûÖÎãàÎã§.");
  return error;
};

const commandSyntaxError = () => {
  const error = new Error("ÏûòÎ™ªÎêú ÌòïÏãùÏùò Î™ÖÎ†πÏñ¥ÏûÖÎãàÎã§.");
  return error;
};

const reservationNotFoundError = (gameType) => {
  const error = new Error(
    `${gameType} Í≤åÏûÑ ÏòàÏïΩÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏñ¥Ïöî\nÍ¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî`
  );
  return error;
};

const duplicateReservationSessionError = () => {
  const error = new Error(
    "Ïù¥Ïù¥ ÏòàÏïΩÏùÑ ÏßÑÌñâÌñàÎçò ÏÑ∏ÏÖòÏù¥ÏóêÏöî\nÍ¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî"
  );
  return error;
};

const systemError = () => {
  const error = new Error(
    "ÏãúÏä§ÌÖú Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏñ¥Ïöî\nÏû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî\nÎ¨∏Ï†úÍ∞Ä ÏßÄÏÜçÎê† Í≤ΩÏö∞ Í¥ÄÎ¶¨ÏûêÏóêÍ≤å Î¨∏ÏùòÌï¥Ï£ºÏÑ∏Ïöî"
  );
  return error;
};

const RESERVATION_SERVER_URL = "https://fn-reservation.lomeone.com";
const STORE_BRANCH = "sharosu";

const GAME_TYPE = {
  MONSTER: "Î™¨Ïä§ÌÑ∞",
  SIT_AND_GO: "ÏãØÏï§Í≥†",
  WEEKLY_TOURNAMENT: "Ï£ºÍ∞ÑÌÜ†ÎÑàÎ®ºÌä∏",
};

const reservationServiceApiCall = (path, method, requestBody) => {
  const jsoupConnect = org.jsoup.Jsoup.connect(RESERVATION_SERVER_URL + path)
    .header("Content-Type", "application/json")
    .timeout(5000)
    .ignoreContentType(true)
    .ignoreHttpErrors(true)
    .method(method);

  let attempt = 0;
  let response = null;
  while (attempt < 5 && response === null) {
    try {
      response = method === org.jsoup.Connection.Method.POST
        ? jsoupConnect.requestBody(JSON.stringify(requestBody)).execute()
        : jsoupConnect.data(requestBody).execute();
    } catch (error) {
      attempt++;
      if (attempt >= 5) {
        throw systemError();
      }
    }
  }
  return response;
};

const gameReservation = (gameType) => {
  const getReservationInfo = () => {
    const requestBody = {
      storeBranch: STORE_BRANCH,
      gameType,
    };

    const response = reservationServiceApiCall(
      "/reservation",
      org.jsoup.Connection.Method.GET,
      requestBody
    );

    const responseStatusCode = response.statusCode();

    if (responseStatusCode === 200) {
      const data = JSON.parse(response.body());

      if (data.status === "CLOSED") {
        throw alreadyGameStartError(gameType);
      }

      const gameCount = data.session % 100;
      const reservation = Object.entries(data.reservation);

      return { gameCount, reservation };
    }
    if (responseStatusCode === 404) {
      const errorData = JSON.parse(response.body());
      if (errorData.errorCode === "reservation/not-found") {
        throw reservationNotFoundError(gameType);
      }
    }
    throw systemError();
  };

  const reserve = (nicknames, time) => {
    if (nicknames.size === 0) {
      throw notExistReserveNickname();
    }
    const requestBody = {
      storeBranch: STORE_BRANCH,
      gameType,
      reservationUsers: Array.from(nicknames),
      reservationTime: time,
    };

    const response = reservationServiceApiCall(
      "/reservation",
      org.jsoup.Connection.Method.POST,
      requestBody
    );

    const responseStatusCode = response.statusCode();

    if (responseStatusCode === 200) {
      const data = JSON.parse(response.body());

      const gameCount = data.session % 100;
      const reservation = Object.entries(data.reservation);

      return { gameCount, reservation };
    }

    if (Math.floor(responseStatusCode / 100) === 4) {
      const errorData = JSON.parse(response.body());

      if (errorData.errorCode === "reservation/closed") {
        throw alreadyGameStartError(gameType);
      }

      if (errorData.errorCode === "reservation/not-found") {
        throw reservationNotFoundError(gameType);
      }
    }

    throw systemError();
  };

  const cancelReservation = (nicknames) => {
    if (nicknames.size === 0) {
      throw notExistCancelNickname();
    }
    const requestBody = {
      storeBranch: STORE_BRANCH,
      gameType,
      cancelUsers: Array.from(nicknames),
    };

    const response = reservationServiceApiCall(
      "/reservation/cancel",
      org.jsoup.Connection.Method.POST,
      requestBody
    );

    const responseStatusCode = response.statusCode();

    if (responseStatusCode === 200) {
      const data = JSON.parse(response.body());

      const gameCount = data.session % 100;
      const reservation = Object.entries(data.reservation);

      return { gameCount, reservation };
    }

    if (Math.floor(responseStatusCode / 100) === 4) {
      const errorData = JSON.parse(response.body());

      if (errorData.errorCode === "reservation/closed") {
        throw alreadyGameStartError();
      }

      if (errorData.errorCode === "reservation/not-found") {
        throw reservationNotFoundError(gameType);
      }
    }

    throw systemError();
  };

  const closeReservation = () => {
    const requestBody = {
      storeBranch: STORE_BRANCH,
      gameType,
    };

    const response = reservationServiceApiCall(
      "/reservation/close",
      org.jsoup.Connection.Method.POST,
      requestBody
    );

    const responseStatusCode = response.statusCode();

    if (responseStatusCode === 200) {
      const data = JSON.parse(response.body());
      return data;
    }

    if (Math.floor(responseStatusCode / 100) === 4) {
      const errorData = JSON.parse(response.body());

      if (errorData.errorCode === "reservation/closed") {
        throw alreadyGameStartErrorForStaff();
      }

      if (errorData.errorCode === "reservation/not-found") {
        throw reservationNotFoundError(gameType);
      }
    }

    throw systemError();
  };

  const openReservationNextGame = () => {
    const requestBody = {
      storeBranch: STORE_BRANCH,
      gameType,
    };

    const response = reservationServiceApiCall(
      "/reservation/start",
      org.jsoup.Connection.Method.POST,
      requestBody
    );

    const responseStatusCode = response.statusCode();

    if (responseStatusCode === 200) {
      const data = JSON.parse(response.body());

      const gameCount = data.session % 100;
      const reservation = Object.entries(data.reservation);

      return { gameCount, reservation };
    }

    if (Math.floor(responseStatusCode / 100) === 4) {
      const errorData = JSON.parse(response.body());

      if (errorData.errorCode === "reservation/in-progress") {
        throw reservationInprogressError();
      }

      if (errorData.errorCode === "reservation/not-found") {
        throw reservationNotFoundError(gameType);
      }
    }

    throw systemError();
  };

  const endToday = () => {
    const now = new Date();
    const year = now.getFullYear().toString().slice(-2);
    const month = (now.getMonth() + 1).toString().padStart(2, "0");
    const day = now.getDate().toString().padStart(2, "0");
    const session = `${year}${month}${day}01`;

    const requestBody = {
      storeBranch: STORE_BRANCH,
      gameType,
      session,
    };

    const response = reservationServiceApiCall(
      "/reservation/start",
      org.jsoup.Connection.Method.POST,
      requestBody
    );

    const responseStatusCode = response.statusCode();

    if (responseStatusCode === 200) {
      const data = JSON.parse(response.body());

      return reserve(["A3"], "19:00");
    }

    if (Math.floor(responseStatusCode / 100) === 4) {
      const errorData = JSON.parse(response.body());

      if (errorData.errorCode === "reservation/already-reserved-session") {
        throw duplicateReservationSessionError();
      }
    }

    throw systemError();
  };

  return {
    getReservationInfo,
    reserve,
    cancelReservation,
    closeReservation,
    openReservationNextGame,
    endToday,
  };
};

const monsterGame = () => {
  const monsterReservation = gameReservation(GAME_TYPE.MONSTER);

  const getGameInformation = (gameCount, reservation) =>
    "üè¥‚Äç‚ò†Ô∏èFinal Nine 4„ÖëÎ°úÏàòÍ∏∏ üè¥‚Äç‚ò†Ô∏è\n" +
    "üé≤Monster stack game\n\n" +
    "‚ñ™Ô∏è" + gameCount + "Î∂Ä‚ñ™Ô∏è\n\n" +
    "‚¨õÔ∏è‚óºÔ∏è‚óæÔ∏è‚ñ™Ô∏è‚ñ™Ô∏è‚óæÔ∏è‚óºÔ∏è‚¨õÔ∏è\n" +
    "‚ñ™Ô∏è7ÏóîÌä∏Î¶¨Îãπ ÏãúÎìú 10Îßå\n" +
    "‚óæÔ∏è300ÎßåÏπ© ÏãúÏûë (150BB)\n" +
    "‚ñ™Ô∏èÎ¶¨Î∞îÏù∏ 2Ìöå (400ÎßåÏπ©)\n" +
    "‚óæÔ∏èÌöçÎìùÏãúÎìú 2ÎßåÎãπ Î™¨Ïä§ÌÑ∞ ÏäπÏ†ê 1Ï†ê\n" +
    "‚ñ™Ô∏èÎ∞îÏù∏,Î¶¨Î∞îÏù∏Ïãú Î™¨Ïä§ÌÑ∞ ÏäπÏ†ê 1Ï†ê\n" +
    "‚¨õÔ∏è‚óºÔ∏è‚óæÔ∏è‚ñ™Ô∏è‚ñ™Ô∏è‚óæÔ∏è‚óºÔ∏è‚¨õÔ∏è\n\n" +
    (gameCount == 1 ? "‚ÄºÔ∏è1Î∂Ä ÌïúÏ†ï ÏñºÎ¶¨Ïπ© +40‚ÄºÔ∏è\n\n" : "") +
    "‚ùïÏòàÏïΩÏûê Î™ÖÎã® (ÏµúÏÜå 6Ìè¨ Ïù¥ÏÉÅ/12Ìè¨ Î∞∏Îü∞Ïã± )\n" +
    "üì¢Îπ†Î•¥Í≥† ÏõêÌôúÌïú Í≤åÏûÑÏßÑÌñâÏùÑ ÏúÑÌï¥\n" +
    "ÏòàÏïΩÏãú Î∞©Î¨∏ÏòàÏ†ï ÏãúÍ∞ÑÎåÄÎ•º Ìï®Íªò Í∏∞Ïû¨ Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§\n\n" +
    reservationListToString(reservation) + "\n" +
    "‚¨õÔ∏è Î¨∏ÏùòÏÇ¨Ìï≠ÏùÄ ÌïëÌÅ¨ÏôïÍ¥ÄÏóêÍ≤å 1:1ÌÜ° Ï£ºÏÑ∏Ïöî";

  const reservationListToString = (reservation) => {
    let result = "";
    for ([nickname, time] of reservation) {
      result += "‚óæÔ∏è " + nickname + " " + time + "\n";
    }

    if (reservation.length >= 10) {
      result += "‚óæÔ∏è \n‚óæÔ∏è \n";
    } else {
      const repeatCount = 10 - reservation.length;
      for (let i = 0; i < repeatCount; i++) {
        result += "‚óæÔ∏è \n";
      }
    }

    return result;
  };

  return {
    gameType: GAME_TYPE.MONSTER,
    getGameInformation: () => {
      const { gameCount, reservation } =
        monsterReservation.getReservationInfo();
      return getGameInformation(gameCount, reservation);
    },
    reserve: (nicknames, time) => {
      const { gameCount, reservation } = monsterReservation.reserve(
        nicknames,
        time
      );
      return getGameInformation(gameCount, reservation);
    },
    cancelReservation: (nicknames) => {
      const { gameCount, reservation } =
        monsterReservation.cancelReservation(nicknames);
      return getGameInformation(gameCount, reservation);
    },
    closeReservation: monsterReservation.closeReservation,
    openReservationNextGame: monsterReservation.openReservationNextGame,
    endToday: monsterReservation.endToday,
  };
};

let isDayFirst = true;

const sitAndGoGame = () => {
  const sitAndGoReservation = gameReservation(GAME_TYPE.SIT_AND_GO);

  const getGameInformation = (gameCount, reservation) =>
    "üè¥‚Äç‚ò†Ô∏èFinal NIne 4„ÖëÎ°úÏàòÍ∏∏üè¥‚Äç‚ò†Ô∏è\n" +
    "üé≤OTT -Sit & Go  \n\n" +
    "‚ñ™Ô∏è" + gameCount + "Î∂Ä‚ñ™Ô∏è\n\n" +
    "‚è±Ô∏è Duration - 7 min\n\n" +
    "üî≥ ÏµúÏÜå Ïù∏Ïõê 5Î™Ö ÏãúÏûë\n" +
    "üî≤ Îç∞ÏùºÎ¶¨ÏôÄ Î∞îÏù∏Í∏àÏï° ÎèôÏùº / ÏãúÎìú1Îßå Î∞îÏù∏Í∞ÄÎä•\n" +
    "üî≥ 1Îì± - 3ÏóîÌä∏Î¶¨Îãπ 10,000ÏãúÎìú\n" +
    "üî≤ 1ÎßåÏãúÎìúÎãπ Ï£ºÍ∞Ñ Îç∞ÏùºÎ¶¨ ÏäπÏ†ê +1Ï†ê\n" +
    "üî≥ Î∞îÏù∏ 200ÎßåÏπ©  / Î¶¨Î∞îÏù∏2Ìöå 300ÎßåÏπ© \n" +
    "üî≤ ÏµúÏÜåÏù∏Ïõê Î™®Ïù¥Î©¥ ÏÉÅÏãú ÏßÑÌñâ\n\n" +
    "üìãÏòàÏïΩÏûê Î™ÖÎã®(ÏµúÏÜå 5Ìè¨ Ïù¥ÏÉÅ)\n" +
    "üì¢Îπ†Î•¥Í≥† ÏõêÌôúÌïú Í≤åÏûÑÏßÑÌñâÏùÑ ÏúÑÌï¥\n" +
    "ÏòàÏïΩÏãú Î∞©Î¨∏ÏòàÏ†ï ÏãúÍ∞ÑÎåÄÎ•º Ìï®Íªò Í∏∞Ïû¨ Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§\n\n" +
    reservationListToString(reservation) + "\n" +
    "‚¨õÔ∏è Î¨∏ÏùòÏÇ¨Ìï≠ÏùÄ ÌïëÌÅ¨ÏôïÍ¥ÄÏóêÍ≤å 1:1ÌÜ° Ï£ºÏÑ∏Ïöî";

  const reservationListToString = (reservation) => {
    let result = "";

    for ([nickname, time] of reservation) {
      result += "‚óæÔ∏è " + nickname + " " + time + "\n";
    }

    if (reservation.length >= 10) {
      result += "‚óæÔ∏è \n‚óæÔ∏è \n";
    } else {
      const repeatCount = 10 - reservation.length;
      for (let i = 0; i < repeatCount; i++) {
        result += "‚óæÔ∏è \n";
      }
    }

    return result;
  };

  return {
    gameType: GAME_TYPE.SIT_AND_GO,
    getGameInformation: () => {
      const { gameCount, reservation } =
        sitAndGoReservation.getReservationInfo();
      return getGameInformation(gameCount, reservation);
    },
    reserve: (nicknames, time) => {
      const { gameCount, reservation } = sitAndGoReservation.reserve(
        nicknames,
        time
      );
      return getGameInformation(gameCount, reservation);
    },
    cancelReservation: (nicknames) => {
      const { gameCount, reservation } =
        sitAndGoReservation.cancelReservation(nicknames);
      return getGameInformation(gameCount, reservation);
    },
    closeReservation: sitAndGoReservation.closeReservation,
    openReservationNextGame: sitAndGoReservation.openReservationNextGame,
    endToday: () => {
      isDayFirst = true;
      sitAndGoReservation.endToday();
    },
  };
};

const weeklyTournamentGame = () => {
  const weeklyTournamentReservation = gameReservation(
    GAME_TYPE.WEEKLY_TOURNAMENT
  );

  const getGameInformation = (gameCount, reservation) =>
    "üè¥‚Äç‚ò†Ô∏èFinal Nine 4„ÖëÎ°úÏàòÍ∏∏ üè¥‚Äç‚ò†Ô∏è\n" +
    "üé≤ MTT-Weekly Tournaments \n\n" +
    "‚è±Ô∏è Duration - 10 min\n\n" +
    "‚óæÔ∏èÏùºÏöîÏùº 20:00 ÏãúÏûë, Ïä§ÌÉÄÌä∏Ïπ© 150Îßå\n" +
    "‚ñ™Ô∏èÎ∞îÏù∏ 15,000Ïõê, Î¶¨Î∞îÏù∏ 2Ìöå 200ÎßåÏπ©\n" +
    "‚óæÔ∏èÏãúÎìúÎ∞îÏù∏ Í∞ÄÎä• , Ìè¨Ïù∏Ìä∏Î∞îÏù∏ Î∂àÍ∞Ä\n\n" +
    "‚ñ™Ô∏èÏòàÏïΩ Event‚ñ™Ô∏è\n" +
    "3Î†àÎ≤® Ïù¥Ï†Ñ ÏÇ¨Ï†Ñ ÏòàÏïΩ Ï∞∏Í∞ÄÏûêÎì§ÍªòÎäî\n" +
    "Í∏∞Ï°¥ 150ÎßåÏπ©+ 50ÎßåÏπ©\n" +
    "(Ï¥ù 200ÎßåÏπ© Ï†úÍ≥µ)\n\n" +
    "‚¨õÔ∏è‚óºÔ∏è‚óæÔ∏è‚ñ™Ô∏è‚ñ™Ô∏è‚óæÔ∏è‚óºÔ∏è‚¨õÔ∏è\n" +
    "‚Ä¢1Îì±: Ïò®ÎùºÏù∏ ÌÜ†ÎÑàÎ®ºÌä∏ Ï∞∏Ïó¨Í∂å ÏßÄÍ∏â\n" +
    "‚Ä¢Î∞îÏù∏ Ïù∏ÏõêÏóê Îî∞Îùº ÏãúÎìú Ï∞®Îì±ÏßÄÍ∏â\n" +
    "‚¨õÔ∏è‚óºÔ∏è‚óæÔ∏è‚ñ™Ô∏è‚ñ™Ô∏è‚óæÔ∏è‚óºÔ∏è‚¨õÔ∏è\n\n" +
    "üìãÏòàÏïΩÏûê Î™ÖÎã® (ÏµúÏÜå 6Ìè¨ Ïù¥ÏÉÅ)\n" +
    reservationListToString(reservation) + "\n" +
    "üî≥ Î¨∏ÏùòÏÇ¨Ìï≠ÏùÄ ÌïëÌÅ¨ÏôïÍ¥ÄÏóêÍ≤å 1:1ÌÜ° Î∂ÄÌÉÅÎìúÎ¶ΩÎãàÎã§";

  const reservationListToString = (reservation) => {
    let result = "";
    let reservationCount = 0;

    for ([nickname, time] of reservation) {
      result += "‚óæÔ∏è " + nickname + "\n";
      if (++reservationCount % 10 === 0) {
        result += "üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞\n";
      }
    }

    if (reservation.length >= 20) {
      result += "‚óæÔ∏è \n‚óæÔ∏è \n";
    } else {
      const repeatCount = 20 - reservation.length;
      for (let i = 0; i < repeatCount; i++) {
        result += "‚óæÔ∏è \n";
        if (++reservationCount % 10 === 0) {
          result += "üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞üü∞\n";
        }
      }
    }

    return result;
  };

  return {
    gameType: GAME_TYPE.WEEKLY_TOURNAMENT,
    getGameInformation: () => {
      const { gameCount, reservation } =
        weeklyTournamentReservation.getReservationInfo();
      return getGameInformation(gameCount, reservation);
    },
    reserve: (nicknames, time) => {
      const { gameCount, reservation } = weeklyTournamentReservation.reserve(
        nicknames,
        time
      );
      return getGameInformation(gameCount, reservation);
    },
    cancelReservation: (nicknames) => {
      const { gameCount, reservation } =
        weeklyTournamentReservation.cancelReservation(nicknames);
      return getGameInformation(gameCount, reservation);
    },
    closeReservation: weeklyTournamentReservation.closeReservation,
    openReservationNextGame:
      weeklyTournamentReservation.openReservationNextGame,
    endToday: weeklyTournamentReservation.endToday,
  };
};

const COMMANDS = {
  RESERVATION_LIST: "!ÏòàÏïΩÏ∞Ω",
  MONSTER: "!Î™¨Ïä§ÌÑ∞",
  MONSTER_SHORT: "!Î™¨",
  SIT_AND_GO: "!ÏãØÏï§Í≥†",
  SIT_AND_GO_SHORT: "!ÏãØ",
  WEEKLY_TOURNAMENT: "!Ï£ºÍ∞ÑÌÜ†ÎÑàÎ®ºÌä∏",
  WEEKLY_TOURNAMENT_SHORT: "!Ï£ºÌÜ†",
  END_TODAY: "!ÏÉ§Î°úÏàòÎßàÍ∞ê",
};

const QUESTION_COMMANDS = "?ÏÉ§Î°úÏàòÎ¥á";

const isBotRoom = (room) => {
  const botRooms = ["ÌååÏù¥ÎÑêÎÇòÏù∏ ÏÉ§Î°úÏàòÍ∏∏Ï†ê", "ÌååÏù¥ÎÑêÎÇòÏù∏ ÏÉ§Î°úÏàòÍ∏∏Ï†ê ÌÖåÏä§Ìä∏"];
  return botRooms.includes(room);
};

const isCommand = (command) => {
  return Object.values(COMMANDS).includes(command);
};

const generateReservationValue = (value) => {
  const replaceValue = value.replace(/, /g, ",");

  if (replaceValue === "") {
    return { nicknames: new Set(), time: "ÌòÑÏû•" };
  }

  const valueTokenizer = replaceValue.split(" ");

  const nicknames = new Set(valueTokenizer[0].split(","));
  const time = valueTokenizer[1] || "ÌòÑÏû•";

  return { nicknames, time };
};

const isStaff = (sender) => {
  return (
    sender.includes("ÏÉ§Î°úÏàòÍ∏∏Ï†ê ÎåÄÌëú") ||
    sender.includes("(Manager)") ||
    sender.includes("(STAFF)")
  );
};

const isNotStaff = (sender) => {
  return !isStaff(sender);
};

const checkStaff = (sender) => {
  if (isNotStaff(sender)) {
    throw notStaffError();
  }
};

function response(
  room,
  msg,
  sender,
  isGroupChat,
  replier,
  imageDB,
  packageName
) {
  if (isBotRoom(room)) {
    const msgTokenizer = msg.split(" ");
    try {
      if (isCommand(msgTokenizer[0])) {
        if (msgTokenizer[0] === COMMANDS.RESERVATION_LIST) {
          try {
            replier.reply(monsterGame().getGameInformation());
          } catch (error) {
            replier.reply(error.message);
          }
          try {
            replier.reply(sitAndGoGame().getGameInformation());
          } catch (error) {
            replier.reply(error.message);
          }
          // replier.reply(weeklyTournamentGame().getGameInformation());
        } else {
          let game;
          switch (msgTokenizer[0]) {
            case COMMANDS.MONSTER:
            case COMMANDS.MONSTER_SHORT:
              game = monsterGame();
              break;
            case COMMANDS.SIT_AND_GO:
            case COMMANDS.SIT_AND_GO_SHORT:
              game = sitAndGoGame();
              break;
            case COMMANDS.WEEKLY_TOURNAMENT:
            case COMMANDS.WEEKLY_TOURNAMENT_SHORT:
              game = weeklyTournamentGame();
              break;
            default:
              break;
          }

          if (game !== undefined) {
            if (msgTokenizer[1]) {
              if (msgTokenizer[1] === "ÏòàÏïΩ" || msgTokenizer[1] === "ÏòàÏïΩÏ∑®ÏÜå") {
                const { nicknames, time } = generateReservationValue(
                  msg.slice(msgTokenizer[0].length + msgTokenizer[1].length + 2)
                );

                if (msgTokenizer[1] === "ÏòàÏïΩ") {
                  replier.reply(game.reserve(nicknames, time));
                } else {
                  replier.reply(game.cancelReservation(nicknames));
                }
              } else if (msgTokenizer[1] === "ÏòàÏïΩÏ∞Ω") {
                replier.reply(game.getGameInformation());
              } else if (msgTokenizer[1] === "ÏòàÏïΩÏãúÏûë") {
                checkStaff(sender);
                game.openReservationNextGame();
                replier.reply(game.getGameInformation());
              } else if (msgTokenizer[1] === "ÏòàÏïΩÎßàÍ∞ê" || msgTokenizer[1] === "ÎßàÍ∞ê") {
                checkStaff(sender);
                game.closeReservation();
                replier.reply(
                  `${game.gameType} Í≤åÏûÑ ÏòàÏïΩÏù¥ ÎßàÍ∞êÎêòÏóàÏäµÎãàÎã§\nÎ≥ÑÎèÑ ÏòàÏïΩÏóÜÏù¥ Îß§Ïû•Ïóê Î∞©Î¨∏ÌïòÏãúÎ©¥ Î∞îÎ°ú Í≤åÏûÑÏùÑ Ï¶êÍ∏∞Ïã§ Ïàò ÏûàÏñ¥Ïöî`
                );
              } else {
                throw commandSyntaxError();
              }
            } else {
              throw commandSyntaxError();
            }
          } else {
            replier.reply(
              "Í∏àÏùº ÏÉ§Î°úÏàòÏ†ê ÎßàÍ∞êÌïòÏòÄÏäµÎãàÎã§!\nÏò§ÎäòÎèÑ Î∞©Î¨∏Ìï¥Ï£ºÏã† ÏÉ§Î∞ÄÎ¶¨Î∂ÑÎì§ Í∞êÏÇ¨Ìï©ÎãàÎã§\nÏò§Îäò ÌïòÎ£®ÎèÑ Ï¶êÍ≤ÅÍ≤å Î≥¥ÎÇ¥ÏãúÍ≥† Ï†ÄÎÖÅÏóê ÌååÎÇòÏóêÏÑú ÎßåÎÇòÏöî!"
            );
            monsterGame().endToday();
            sitAndGoGame().endToday();
            if (new Date().getDay() === 0) {
              weeklyTournamentGame().endToday();
            }
          }
        }
      } else if (msgTokenizer[0] === QUESTION_COMMANDS) {
        const question = msgTokenizer[1];
        if (question === "ÏòàÏïΩÎ∞©Î≤ï") {
          replier.reply(
            "1. ÏòàÏïΩÎ∞©Î≤ï \n" +
              "!Í≤åÏûÑÏ¢ÖÎ•ò ÏòàÏïΩ ÎãâÎÑ§ÏûÑ ÎèÑÏ∞©ÏòàÏ†ïÏãúÍ∞Ñ\n" +
              "ex1) !Î™¨Ïä§ÌÑ∞ ÏòàÏïΩ Ïª¥ÌÖå 20:00\n" +
              "ex2) !ÏãØÏï§Í≥† ÏòàÏïΩ Ïª¥ÌÖå,Ïª¥ÌÖå1 20:00\n" +
              "‚ô¶Ô∏èÏòàÏïΩÏ∑®ÏÜå - !Î™¨Ïä§ÌÑ∞ ÏòàÏïΩÏ∑®ÏÜå Ïª¥ÌÖå"
          );
        } else {
          replier.reply(
            "ÏïÑÏßÅ ÏòàÏïΩÎ∞©Î≤ï Ïù¥Ïô∏Ïùò Îã§Î•∏ ÏßàÎ¨∏ÏùÄ ÎãµÎ≥ÄÏùÑ Î™ªÎìúÎ†§Ïöî„Ö†„Ö†\n" +
              "Îã§Î•∏ ÏßàÎ¨∏ÎèÑ Î∞õÏùÑ Ïàò ÏûàÎèÑÎ°ù Í≥ÑÏÜç Î∞úÏ†ÑÌï¥Î≥ºÍ≤åÏöî!"
          );
        }
      }
    } catch (error) {
      replier.reply(error.message);
    }
  }
}

// Below 4 methods are used to modify activity screen
function onCreate(savedInstanceState, activity) {
  const textView = new android.widget.TextView(activity);
  textView.setText("Hello, World!");
  textView.setTextColor(android.graphics.Color.DKGRAY);
  activity.setContentView(textView);
}

function onStart(activity) {}

function onResume(activity) {}

function onPause(activity) {}

function onStop(activity) {}
